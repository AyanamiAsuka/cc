// 规则集通用配置
const ruleProviderCommon = {
  "type": "http",
  "format": "yaml",
  "interval": 86400
};
// 规则集配置
const ruleProviders = {
  "Download": {
    ...ruleProviderCommon,
    "behavior": "classical",
    "url": "https://cdn.jsdelivr.net/gh/blackmatrix7/ios_rule_script@master/rule/Clash/Download/Download.yaml",
    "path": "./ruleset/PT_Download.yaml"
  },
  "OpenAi": {
    ...ruleProviderCommon,
    "behavior": "classical",
    "url": "https://cdn.jsdelivr.net/gh/blackmatrix7/ios_rule_script/master/rule/Clash/OpenAI/OpenAI.yaml",
    "path": "./ruleset/OpenAi.yaml"
  },
  "PrivateTracker": {
    ...ruleProviderCommon,
    "behavior": "classical",
    "url": "https://cdn.jsdelivr.net/gh/blackmatrix7/ios_rule_script@master/rule/Clash/PrivateTracker/PrivateTracker.yaml",
    "path": "./ruleset/PrivateTracker.yaml"
  },
  "Spotify": {
    ...ruleProviderCommon,
    "behavior": "classical",
    "url": "https://cdn.jsdelivr.net/gh/blackmatrix7/ios_rule_script@master/rule/Clash/Spotify/Spotify.yaml",
    "path": "./ruleset/Spotify.yaml"
  },
  "Local": {
    ...ruleProviderCommon,
    "behavior": "classical",
    "url": "https://cdn.jsdelivr.net/gh/blackmatrix7/ios_rule_script@master/rule/Clash/Lan/Lan.yaml",
    "path": "./ruleset/Local.yaml"
  },
  "AdvertisingLite": {
    ...ruleProviderCommon,
    "behavior": "classical",
    "url": "https://cdn.jsdelivr.net/gh/blackmatrix7/ios_rule_script@master/rule/Clash/AdvertisingLite/AdvertisingLite.yaml",
    "path": "./ruleset/AdvertisingLite.yaml"
  },
  "SteamCN": {
    ...ruleProviderCommon,
    "behavior": "classical",
    "url": "https://cdn.jsdelivr.net/gh/blackmatrix7/ios_rule_script@master/rule/Clash/SteamCN/SteamCN.yaml",
    "path": "./ruleset/SteamCN.yaml"
  },
  "Google": {
    ...ruleProviderCommon,
    "behavior": "classical",
    "url": "https://cdn.jsdelivr.net/gh/blackmatrix7/ios_rule_script@master/rule/Clash/Google/Google.yaml",
    "path": "./ruleset/Google.yaml"
  },
  "Youtube": {
    ...ruleProviderCommon,
    "behavior": "classical",
    "url": "https://cdn.jsdelivr.net/gh/blackmatrix7/ios_rule_script@master/rule/Clash/YouTube/YouTube.yaml",
    "path": "./ruleset/Youtube.yaml"
  },
  "TikTok": {
    ...ruleProviderCommon,
    "behavior": "classical",
    "url": "https://cdn.jsdelivr.net/gh/blackmatrix7/ios_rule_script@master/rule/Clash/TikTok/TikTok.yaml",
    "path": "./ruleset/TikTok.yaml"
  },
  "ProxyGFWlist": {
    ...ruleProviderCommon,
    "behavior": "classical",
    "url": "https://cdn.jsdelivr.net/gh/blackmatrix7/ios_rule_script@master/rule/Clash/Global/Global_Classical.yaml",
    "path": "./ruleset/ProxyGFWlist.yaml"
  },
  "Telegram": { 
    ...ruleProviderCommon,
    "behavior": "classical",
    "url": "https://cdn.jsdelivr.net/gh/blackmatrix7/ios_rule_script@master/rule/Clash/Telegram/Telegram.yaml",
    "path": "./ruleset/Telegram.yaml"
  }
};
// 规则
const rules = [
  // Loyalsoldier 规则集
  "RULE-SET,OpenAi,OpenAi",
  "RULE-SET,Download,DIRECT",
  "RULE-SET,PrivateTracker,DIRECT",
  "RULE-SET,Spotify,Spotify",
  "RULE-SET,Local,DIRECT",
  "RULE-SET,AdvertisingLite,广告拦截",
  "RULE-SET,SteamCN,DIRECT",
  "RULE-SET,Telegram,Telegram",
  "RULE-SET,Google,谷歌",
  "RULE-SET,Youtube,谷歌",
  "RULE-SET,TikTok,TikTok",
  "RULE-SET,ProxyGFWlist,节点选择",
  "GEOIP,CN,DIRECT",
  "MATCH,黑白"
];
// 代理组通用配置
const groupBaseOption = {
  "interval": 300,
  "timeout": 3000,
  "url": "https://www.google.com/generate_204",
  "lazy": true,
  "max-failed-times": 3,
  "hidden": false
};

// 程序入口
function main(config) {
  const proxyCount = config?.proxies?.length ?? 0;
  const proxyProviderCount =
    typeof config?.["proxy-providers"] === "object" ? Object.keys(config["proxy-providers"]).length : 0;
  if (proxyCount === 0 && proxyProviderCount === 0) {
    throw new Error("配置文件中未找到任何代理");
  }

  // 覆盖原配置中的代理组
  config["proxy-groups"] = [
    {
      ...groupBaseOption,
      "name": "节点选择",
      "type": "select",
      "proxies": ["香港", "日本", "新加坡", "美国"],
      "include-all": false,
      "icon": "https://raw.githubusercontent.com/Koolson/Qure/master/IconSet/Color/Proxy.png"  
    },
    {
      ...groupBaseOption,
      "name": "手动切换",
      "type": "select",
      "include-all": true,
      "icon": "https://raw.githubusercontent.com/Koolson/Qure/master/IconSet/Color/Pornhub.png" 
    },
    {
      ...groupBaseOption,
      "name": "OpenAi",
      "type": "select",
      "proxies": ["香港", "日本", "新加坡", "美国", "手动切换", "OpenAi节点",],
      "include-all": false,
      "icon": "https://raw.githubusercontent.com/clash-verge-rev/clash-verge-rev.github.io/main/docs/assets/icons/chatgpt.svg" 
    },
    {
      ...groupBaseOption,
      "name": "Spotify",
      "type": "select",
      "proxies": ["DIRECT", "香港", "日本", "新加坡", "美国", "手动切换"],
      "include-all": false,
      "icon": "https://raw.githubusercontent.com/Koolson/Qure/master/IconSet/Color/Spotify.png" 
    },
    {
      ...groupBaseOption,
      "name": "Telegram",
      "type": "select",
      "proxies": ["香港", "日本", "新加坡", "美国","手动切换"],
      "include-all": false,
      "icon": "https://raw.githubusercontent.com/clash-verge-rev/clash-verge-rev.github.io/main/docs/assets/icons/telegram.svg" 
    },
    {
      ...groupBaseOption,
      "name": "谷歌",
      "type": "select",
      "proxies": ["香港", "日本", "新加坡", "美国", "手动切换"],
      "include-all": false,
      "icon": "https://raw.githubusercontent.com/clash-verge-rev/clash-verge-rev.github.io/main/docs/assets/icons/google.svg" 
    },
    {
      ...groupBaseOption,
      "name": "TikTok",
      "type": "select",
      "proxies": ["DIRECT", "香港", "日本", "新加坡", "美国", "TikTok节点"],
      "include-all": false,
      "icon": "https://raw.githubusercontent.com/clash-verge-rev/clash-verge-rev.github.io/main/docs/assets/icons/tiktok.svg" 
    },
    {
      ...groupBaseOption,
      "name": "广告拦截",
      "type": "select",
      "proxies": ["DIRECT", "REJECT"],
      "icon": "https://raw.githubusercontent.com/clash-verge-rev/clash-verge-rev.github.io/main/docs/assets/icons/block.svg"
    },
    {
      ...groupBaseOption,
      "name": "OpenAi节点",
      "type": "select",
      "include-all": true,
      "icon": "https://raw.githubusercontent.com/clash-verge-rev/clash-verge-rev.github.io/main/docs/assets/icons/chatgpt.svg" 
    },
    {
      ...groupBaseOption,
      "name": "TikTok节点",
      "type": "select",
      "include-all": true,
      "icon": "https://raw.githubusercontent.com/clash-verge-rev/clash-verge-rev.github.io/main/docs/assets/icons/tiktok.svg" 
    },
    {
      ...groupBaseOption,
      "name": "香港",
      "type": "url-test",
      "tolerance": 50,
      "include-all": true,
      "filter": "(?i)港|hk|hongkong|hong kong",
      "icon": "https://raw.githubusercontent.com/clash-verge-rev/clash-verge-rev.github.io/main/docs/assets/icons/flags/hk.svg"
    },
    {
      ...groupBaseOption,
      "name": "日本",
      "type": "url-test",
      "tolerance": 50,
      "include-all": true,
      "filter": "(?i)日|日本|川日|东京|大阪|泉日|埼玉|沪日|深日|JP|Japan",
      "icon": "https://raw.githubusercontent.com/clash-verge-rev/clash-verge-rev.github.io/main/docs/assets/icons/flags/jp.svg"
    },
    {
      ...groupBaseOption,
      "name": "新加坡",
      "type": "url-test",
      "tolerance": 50,
      "include-all": true,
      "filter": "(?i)新|sg|singapore|新加坡|狮城|SG|Singapore",
      "icon": "https://raw.githubusercontent.com/clash-verge-rev/clash-verge-rev.github.io/main/docs/assets/icons/flags/sg.svg"
    },    
    {
      ...groupBaseOption,
      "name": "美国",
      "type": "url-test",
      "tolerance": 50,
      "include-all": true,
      "filter": "(?i)美|美国|波特兰|达拉斯|俄勒冈|凤凰城|费利蒙|硅谷|拉斯维加斯|洛杉矶|圣何塞|圣克拉拉|西雅图|芝加哥|US|United States",
      "icon": "https://raw.githubusercontent.com/clash-verge-rev/clash-verge-rev.github.io/main/docs/assets/icons/flags/us.svg"
    },
    {
      ...groupBaseOption,
      "name": "黑白",
      "type": "select",
      "proxies": ["DIRECT", "节点选择"],
      "icon": "https://raw.githubusercontent.com/clash-verge-rev/clash-verge-rev.github.io/main/docs/assets/icons/unknown.svg"
    }

  ];

  // 覆盖原配置中的规则
  config["rule-providers"] = ruleProviders;
  config["rules"] = rules;

  // 返回修改后的配置
  return config;
}
