parsers: # array
  - reg: ^.*$ 
  # - reg: ^.*$ 匹配所有订阅，或  - url: https://example.com/profile.yaml 指定订阅
  # 下面是删除服务商自带的策略组和规则
    code: |
      module.exports.parse = (raw, { yaml }) => {
        const rawObj = yaml.parse(raw)
        const groups = []
        const rules = []
        return yaml.stringify({ ...rawObj, 'proxy-groups': groups, rules })
      } 
  # 建立自己的配置
    yaml:
      prepend-proxy-groups: # 建立策略组
      - name: 🚀 节点选择
        type: select
        url: http://www.google.com/generate_204
        interval: 300
        proxies:
          - 🇭🇰 香港
          - 🇯🇵 日本
          - 🇸🇬 新加坡
          - 🇺🇸 美国         
          - 👆 手动切换
          - DIRECT

      - name: 👆 手动切换
        type: select
        proxies:

      - name: 💭 OpenAI
        type: select
        proxies:
          - 💭 OpenAI节点
          - 🇯🇵 日本
          - 🇺🇸 美国 
          - 🇸🇬 新加坡   

      - name: 🍏 Spotify
        type: select
        proxies:
          - DIRECT
          - 🇺🇸 美国
          - 🚀 节点选择

      - name: Ⓜ️ 微软云盘
        type: select
        proxies:
          - DIRECT
          - 🚀 节点选择
          - 🇭🇰 香港
          - 🇯🇵 日本
          - 🇸🇬 新加坡
          - 🇺🇸 美国
          - 👆 手动切换

      - name: Ⓜ️ 微软服务
        type: select
        proxies:
          - DIRECT
          - 🚀 节点选择
          - 🇭🇰 香港
          - 🇯🇵 日本
          - 🇸🇬 新加坡
          - 🇺🇸 美国
          - 👆 手动切换

      - name: 🐕 谷歌服务
        type: select
        proxies:
          - DIRECT
          - 🚀 节点选择
          - 🇭🇰 香港
          - 🇯🇵 日本
          - 🇸🇬 新加坡
          - 🇺🇸 美国
          - 👆 手动切换

      - name: 🎮 游戏平台
        type: select
        proxies:
          - DIRECT
          - 🚀 节点选择
          - 🇭🇰 香港
          - 🇯🇵 日本
          - 🇸🇬 新加坡
          - 🇺🇸 美国
          - 👆 手动切换

      - name: 🍎 苹果服务
        type: select
        proxies:
          - DIRECT
          - 🚀 节点选择
          - 🇭🇰 香港
          - 🇯🇵 日本
          - 🇸🇬 新加坡
          - 🇺🇸 美国
          - 👆 手动切换

      - name: 🎥 奈飞视频
        type: select
        proxies:
          - 🎥 奈飞节点
          - 👆 手动切换

      - name: 🗽 TikTok
        type: select
        proxies:
          - 🎥 TikTok节点
          - 👆 手动切换
          - DIRECT


      - name: 🎯 全球直连
        type: select
        proxies:
          - DIRECT
          - REJECT

      - name: 🛑 广告拦截
        type: select
        proxies:
          - REJECT
          - DIRECT


      - name: 🍃 应用净化
        type: select
        proxies:
          - REJECT
          - DIRECT

      - name: 🐟 漏网之鱼
        type: select
        proxies:
          - DIRECT
          - 🚀 节点选择
          - 🇭🇰 香港
          - 🇯🇵 日本
          - 🇸🇬 新加坡
          - 🇺🇸 美国
          - 👆 手动切换

      - name: 💭 OpenAI节点
        type: select
        proxies:

      - name: 🇭🇰 香港
        type: url-test
        url: http://www.google.com/generate_204
        interval: 1800
        lazy: true
        tolerance: 50
      
      - name: 🇯🇵 日本
        type: url-test
        url: http://www.google.com/generate_204
        interval: 1800
        lazy: true
        tolerance: 50
      
      - name: 🇸🇬 新加坡
        type: url-test
        url: http://www.google.com/generate_204
        interval: 1800
        lazy: true
        tolerance: 50

      - name: 🇺🇸 美国
        type: url-test
        url: http://www.google.com/generate_204
        interval: 1800
        lazy: true
        tolerance: 50

      - name: 🎥 奈飞节点
        type: select
        proxies:

      - name: 🎥 TikTok节点
        type: select
        proxies:
  
         
      commands:
        - proxy-groups.(👆 手动切换).proxies=[]proxyNames
        - proxy-groups.(💭 OpenAI节点).proxies=[]proxyNames
        - proxy-groups.(🎥 奈飞节点).proxies=[]proxyNames
        - proxy-groups.(🎥 TikTok节点).proxies=[]proxyNames
        - proxy-groups.🇭🇰 香港.proxies=[]proxyNames|港|香港|🇭🇰|HK|Hong Kong
        - proxy-groups.🇯🇵 日本.proxies=[]proxyNames|日|日本|🇯🇵|川日|东京|大阪|泉日|埼玉|沪日|深日|[^-]日|JP|Japan
        - proxy-groups.🇸🇬 新加坡.proxies=[]proxyNames|新加坡|🇸🇬|坡|狮城|SG|Singapore
        - proxy-groups.🇺🇸 美国.proxies=[]proxyNames|美|美国|🇺🇸|波特兰|达拉斯|俄勒冈|凤凰城|费利蒙|硅谷|拉斯维加斯|洛杉矶|圣何塞|圣克拉拉|西雅图|芝加哥|US|United States

        - mixed-port=7890

       # 为各个策略组添加一个DIRECT，避免机场节点无法匹配上面的正则筛选而导致配置出错。应该有其他办法避免，但是我不会。
        - proxy-groups.🇭🇰 香港.proxies.0+DIRECT
        - proxy-groups.🇯🇵 日本.proxies.0+DIRECT
        - proxy-groups.🇺🇸 美国.proxies.0+DIRECT
        - proxy-groups.🇸🇬 新加坡.proxies.0+DIRECT

        
  # 添加规则
      prepend-rules: # 规则由上往下遍历，如上面规则已经命中，则不再往下处理
        - RULE-SET,Download,DIRECT
        - RULE-SET,OpenAi,💭 OpenAI
        - RULE-SET,PrivateTracker,DIRECT
        - RULE-SET,Spotify,🍏 Spotify
        - RULE-SET,Local,DIRECT
        - RULE-SET,Direct_vj,DIRECT
        - RULE-SET,AdvertisingLite,🛑 广告拦截
        - RULE-SET,BanProgramAD,🍃 应用净化
        - RULE-SET,GoogleCN,🎯 全球直连
        - RULE-SET,SteamCN,🎯 全球直连
        - RULE-SET,OneDrive,Ⓜ️ 微软云盘
        - RULE-SET,Microsoft,Ⓜ️ 微软服务
        - RULE-SET,Apple,🍎 苹果服务
        - RULE-SET,Google,🐕 谷歌服务
        - RULE-SET,TikTok,🗽 TikTok
        - RULE-SET,Epic,🎮 游戏平台
        - RULE-SET,Origin,🎮 游戏平台
        - RULE-SET,Sony,🎮 游戏平台
        - RULE-SET,Steam,🎮 游戏平台
        - RULE-SET,Nintendo,🎮 游戏平台
        - RULE-SET,Netflix,🎥 奈飞视频
        - RULE-SET,ProxyMedia,🎥 奈飞视频
        - RULE-SET,ProxyGFWlist,🚀 节点选择
        - GEOIP,CN,DIRECT
        - MATCH,👆 手动切换 # ⭐️⭐️规则之外的，在这里来修改是白名单模式还是黑名单模式，具体在“👆 手动切换”选择代理或直连。


  # 添加规则集
      mix-rule-providers: 
        Download: # 下载
          type: http
          behavior: classical
          url: "https://cdn.jsdelivr.net/gh/blackmatrix7/ios_rule_script@master/rule/Clash/Download/Download.yaml"
          path: ./ruleset/PT_Download.yaml
          interval: 86400

        OpenAi: # openai
          type: http
          behavior: classical
          url: "https://cdn.jsdelivr.net/gh/Pukia-vj/cc@main/clash/rules/OpenAi_vj.yaml"
          path: ./ruleset/OpenAI.yaml
          interval: 86400

        PrivateTracker: # PT下载
          type: http
          behavior: classical
          url: "https://cdn.jsdelivr.net/gh/blackmatrix7/ios_rule_script@master/rule/Clash/PrivateTracker/PrivateTracker.yaml"
          path: ./ruleset/PrivateTracker.yaml
          interval: 86400


        Spotify: # spotify
          type: http
          behavior: classical
          url: "https://cdn.jsdelivr.net/gh/blackmatrix7/ios_rule_script@master/rule/Clash/Spotify/Spotify.yaml"
          path: ./ruleset/Spotify.yaml
          interval: 86400


        Local: # 本地
          type: http
          behavior: classical
          url: "https://cdn.jsdelivr.net/gh/blackmatrix7/ios_rule_script@master/rule/Clash/Lan/Lan.yaml"
          path: ./ruleset/Local.yaml
          interval: 86400

        Direct_vj: # 直接连接的
          type: http
          behavior: classical
          url: "https://cdn.jsdelivr.net/gh/blackmatrix7/ios_rule_script@master/rule/Clash/Direct/Direct.yaml"
          path: ./ruleset/Direct_vj.yaml
          interval: 86400

        AdvertisingLite: # 广告列表
          type: http
          behavior: classical
          url: "https://raw.githubusercontent.com/Pukia-vj/cc/main/clash/rules/Download_vj.txt"
          path: ./ruleset/AdvertisingLite.yaml
          interval: 86400

        BanProgramAD: # 应用内的广告
          type: http
          behavior: classical
          url: "https://raw.githubusercontent.com/Pukia-vj/cc/main/clash/rules/Download_vj.txt"
          path: ./ruleset/BanProgramAD.yaml
          interval: 86400

        GoogleCN: # GoogleCN
          type: http
          behavior: classical
          url: "https://raw.githubusercontent.com/Pukia-vj/cc/main/clash/rules/Download_vj.txt"
          path: ./ruleset/GoogleCN.yaml
          interval: 86400

        SteamCN: # SteamCN
          type: http
          behavior: classical
          url: "https://raw.githubusercontent.com/Pukia-vj/cc/main/clash/rules/Download_vj.txt"
          path: ./ruleset/SteamCN.yaml
          interval: 86400

        OneDrive: # OneDrive
          type: http
          behavior: classical
          url: "https://raw.githubusercontent.com/Pukia-vj/cc/main/clash/rules/Download_vj.txt"
          path: ./ruleset/OneDrive.yaml
          interval: 86400

        Microsoft: # Microsoft
          type: http
          behavior: classical
          url: "https://raw.githubusercontent.com/Pukia-vj/cc/main/clash/rules/Download_vj.txt"
          path: ./ruleset/Microsoft.yaml
          interval: 86400

        Google: # google
          type: http
          behavior: classical
          url: "https://raw.githubusercontent.com/Pukia-vj/cc/main/clash/rules/Download_vj.txt"
          path: ./ruleset/Google.yaml
          interval: 86400

        Apple: # apple
          type: http
          behavior: classical
          url: "https://raw.githubusercontent.com/Pukia-vj/cc/main/clash/rules/Download_vj.txt"
          path: ./ruleset/Apple.yaml
          interval: 86400

        TikTok: # tiktok
          type: http
          behavior: classical
          url: "https://raw.githubusercontent.com/Pukia-vj/cc/main/clash/rules/Download_vj.txt"
          path: ./ruleset/TikTok.yaml
          interval: 86400

        Epic: # epic
          type: http
          behavior: classical
          url: "https://raw.githubusercontent.com/Pukia-vj/cc/main/clash/rules/Download_vj.txt"
          path: ./ruleset/Epic.yaml
          interval: 86400

        Origin: #origin
          type: http
          behavior: classical
          url: "https://raw.githubusercontent.com/Pukia-vj/cc/main/clash/rules/Download_vj.txt"
          path: ./ruleset/Origin.yaml
          interval: 86400

        Sony: # 索尼
          type: http
          behavior: classical
          url: "https://raw.githubusercontent.com/Pukia-vj/cc/main/clash/rules/Download_vj.txt"
          path: ./ruleset/Sony.yaml
          interval: 86400

        Steam: # steam
          type: http
          behavior: classical
          url: "https://raw.githubusercontent.com/Pukia-vj/cc/main/clash/rules/Download_vj.txt"
          path: ./ruleset/Steam.yaml
          interval: 86400

        Nintendo: # 任天堂
          type: http
          behavior: classical
          url: "https://raw.githubusercontent.com/Pukia-vj/cc/main/clash/rules/Download_vj.txt"
          path: ./ruleset/Nintendo.yaml
          interval: 86400

        Netflix: # 奈飞视频
          type: http
          behavior: classical
          url: "https://raw.githubusercontent.com/Pukia-vj/cc/main/clash/rules/Download_vj.txt"
          path: ./ruleset/Netflix.yaml
          interval: 86400

        ProxyMedia: # 国外媒体
          type: http
          behavior: classical
          url: "https://raw.githubusercontent.com/Pukia-vj/cc/main/clash/rules/Download_vj.txt"
          path: ./ruleset/ProxyMedia.yaml
          interval: 86400


        ProxyGFWlist: # GFW列表
          type: http
          behavior: classical
          url: "https://raw.githubusercontent.com/Pukia-vj/cc/main/clash/rules/Download_vj.txt"
          path: ./ruleset/ProxyGFWlist.yaml
          interval: 86400
